#include <iostream>
#include <vector>
#include <clocale>
#include <cstdlib>
using namespace std;
/*В части № 1 выполнить следующее:
+1) Создать объект-контейнер и заполнить его данными.
+2) Просмотреть контейнер.
+3) Изменить контейнер, удалив из него одни элементы и заменив другие.
+4) Просмотреть контейнер, используя для доступа к его элементам итераторы.
+5) Создать второй контейнер этого же класса и заполнить его данными того же типа, что и первый контейнер.
6) Изменить первый контейнер, удалив из него n элементов после заданного и добавив затем в него все элементы из второго контейнера.
7) Просмотреть первый и второй контейнеры.
В части № 2 выполнить то же самое, но для данных пользовательского типа (желательно использовать тип контейнера, отличный от используемого в части № 1).
В части № 3 выполнить следующее:
1. Создать контейнер, содержащий объекты пользовательского типа.
2. Отсортировать его по убыванию элементов.
3. Просмотреть контейнер.
4. Используя подходящий алгоритм, найти в контейнере элемент, удовлетворяющий заданному условию.
5. Переместить элементы, удовлетворяющие заданному условию в другой (предварительно пустой) контейнер.
6. Просмотреть второй контейнер.
7. Отсортировать первый и второй контейнеры по возрастанию элементов.
8. Просмотреть их.
9. Получить третий контейнер путем слияния первых двух.
10. Просмотреть третий контейнер.
11 .Подсчитать, сколько элементов, удовлетворяющих заданному условию, содержит третий контейнер.
12. Определить, есть ли в третьем контейнере элемент, удовлетворяющий заданному условию.
Методические указания.
1. В части № 1 тип контейнера и встроенный тип данных выбирается самостоятельно.
2. В части № 2 в качестве пользовательского типа данных использовать свой пользовательский класс(придумать самостоятельно, например: студент, сотрудник, товар, автомобиль, книга, банковский счёт и т.д.).
3. При создании контейнеров в части № 2 объекты выгружать и загружать из потока (файла).
4. Для вставки и удаления элементов контейнера в части № 2 использовать соответствующие операции, определенные в классе контейнера.
5. Для создания второго контейнера в части № 3 можно использовать либо алгоритм remove_copy_if, либо определить свой алгоритм copy_if, которого нет в STL.
6. Для поиска элемента в коллекции можно использовать алгоритм find_if, либо for_each, либо binary_search, если контейнер отсортирован.
7. Для сравнения элементов при сортировке по возрастанию используется операция <, которая должна быть перегружена в пользовательском классе. Для сортировки по убыванию следует написать функцию comp и использовать вторую версию алгоритма sort.
8. Условия поиска и замены элементов выбираются самостоятельно и для них пишется функция-предикат.
9. Для ввода-вывода объектов пользовательского класса следует перегрузить операции ">>" и "<<".
10. Некоторые алгоритмы могут не поддерживать используемые в вашей программе контейнеры. Например, алгоритм sort не поддерживает контейнеры, которые не имеют итераторов произвольного доступа. В этом случае следует написать свой алгоритм. Например, для стека алгоритм сортировки может выполняться следующим образом: переписать стек в вектор, отсортировать вектор, переписать вектор в стек.*/
int main(int argc, char *argv[])
{
    cout<<"Создание и инциализация объекта STL контейнера Вектор. Текущие значения:"<<endl;
    vector <int> vec1={7, 5, 16, 8};
    srand(time(NULL));
    vec1.push_back(25);
    vec1.push_back(13);
    vec1.insert(vec1.begin()+2, 4);
    for(int n:vec1)
           std::cout<<n<<'\n';
    vec1.erase(vec1.begin()+2, vec1.begin()+5);
    vector <int> vec2;
    for(int i=0;i<4;i++)
        vec1.push_back(rand());
    return 0;
}
